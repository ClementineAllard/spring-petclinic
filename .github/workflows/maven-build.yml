# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Autorisation de lancer manuellement le workflow
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven Wrapper
        run: ./mvnw -B verify
      
      - name: Test with Maven Wrapper
        run: ./mvnw -B test

      - name: Run Docker Command for Code Quality
        run: |
          mkdir codequality-results
          docker run \
            --env CODECLIMATE_CODE="$PWD" \
            --volume "$PWD":/code \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --volume /tmp/cc:/tmp/cc \
            codeclimate/codeclimate analyze -f html > ./codequality-results/index.html

      - name: Upload Code Quality Report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: codequality-results/

      - name: Install Docker Compose
        run: sudo apt-get install docker-compose

      - name: Build and Deploy Docker Image
        run: |
          ./mvnw install -PbuildDocker -DskipTests=true -DpushImage \
            -Dhttps.protocols=TLSv1.2 --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true
          docker compose build
          docker compose push
